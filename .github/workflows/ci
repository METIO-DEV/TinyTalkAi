name: CI                       # Titre qui apparaîtra dans l’onglet Actions
on:                            # ➜ QUAND déclencher ?
  push:                        #   • à chaque push sur main
    branches: [main]
  pull_request:                #   • à chaque Pull Request vers n’importe quelle branche

jobs:
  build-test:                  # ➜ 1 seul job (on peut en ajouter d’autres plus tard)
    runs-on: ubuntu-latest     #   • Runner GitHub hébergé (Ubuntu 22.04)

    services:                  #   • Conteneurs « côtés » pour le job
      mysql:                   #     — MySQL 8 pour les tests
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_DATABASE: testing
        ports: [3306:3306]     #     — Expose pour que le conteneur PHP s’y connecte

    steps:                     #   • Étapes exécutées séquentiellement
      # 1. Récupérer le code
      - uses: actions/checkout@v4   # clone votre repo dans le runner

      # 2. Cache Composer (évite de re-télécharger les dépendances)
      - uses: actions/cache@v4
        with:
          path: ~/.composer/cache
          key: ${{ runner.os }}-composer-${{ hashFiles('**/composer.lock') }}

      # 3. Préparer PHP
      - uses: shivammathur/setup-php@v2
        with:
          php-version: '8.3'        # version exécutée dans le runner
          extensions: mbstring pdo_mysql
          coverage: none            # pas besoin de Xdebug ici

      # 4. Installer les dépendances back-end
      - run: composer install --no-progress --no-interaction --prefer-dist

      # 5. Préparer Node pour compiler les assets
      - uses: actions/setup-node@v4
        with:
          node-version: '20'

      - run: |
          npm ci                   # installe packages front
          npm run build --if-present   # compile Vite/Tailwind

      # 6. Lint & analyse statique
      - run: vendor/bin/pint --test         # code-style Laravel Pint
      - run: vendor/bin/phpstan analyse     # analyse statique

      # 7. Lancer les tests
      - name: Run Pest tests
        env:                         # variables d’env pour les tests
          DB_CONNECTION: mysql
          DB_HOST: 127.0.0.1         # le service « mysql »
          DB_PORT: 3306
          DB_DATABASE: testing
          DB_USERNAME: root
          DB_PASSWORD: root
          REDIS_HOST: localhost
        run: php artisan test --parallel --compact
